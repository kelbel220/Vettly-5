/**
 * Weekly Tip Model
 * Defines the structure and helper functions for the weekly dating tips feature
 */

// Status options for a weekly tip
export enum WeeklyTipStatus {
  PENDING = 'pending',    // Newly generated, waiting for approval
  APPROVED = 'approved',  // Approved by matchmaker, ready to be shown to users
  ACTIVE = 'active',      // Currently active tip being shown to users
  ARCHIVED = 'archived',  // Past tip no longer being shown
  REJECTED = 'rejected'   // Rejected by matchmaker, won't be shown to users
}

// Category options for weekly tips
export enum WeeklyTipCategory {
  CONVERSATION_STARTERS = 'conversation_starters',
  DATE_IDEAS = 'date_ideas',
  RELATIONSHIP_ADVICE = 'relationship_advice',
  MATCHMAKING_INSIGHTS = 'matchmaking_insights',
  SELF_IMPROVEMENT = 'self_improvement'
}

// Main interface for a Weekly Tip
export interface WeeklyTip {
  id?: string;                         // Document ID in Firestore
  title: string;                       // Title of the tip
  content: string;                     // Main content of the tip
  shortDescription: string;            // Brief description for preview
  category: WeeklyTipCategory;         // Category of the tip
  status: WeeklyTipStatus;             // Current status
  createdAt: Date | number;            // Creation timestamp
  updatedAt: Date | number;            // Last update timestamp
  publishedAt?: Date | number;         // When the tip was published/activated
  expiresAt?: Date | number;           // When the tip should be archived
  authorId?: string;                   // ID of the matchmaker who created/approved it
  authorName?: string;                 // Name of the matchmaker
  aiGenerated: boolean;                // Whether it was generated by AI
  quickTips: string[];                 // List of quick actionable tips
  didYouKnow?: string;                 // Interesting fact related to the tip
  weeklyChallenge?: string;            // Challenge for users to try
  imageUrl?: string;                   // Optional image URL
  viewCount: number;                   // Number of total views
  uniqueViewCount: number;             // Number of unique users who viewed it
}

// Interface for tracking which users have viewed which tips
export interface UserTipView {
  id?: string;           // Document ID in Firestore
  userId: string;        // User ID
  tipId: string;         // Tip ID
  viewedAt: Date;        // When the user viewed the tip
  readStatus: boolean;   // Whether the user has read the full tip
  dismissed: boolean;    // Whether the user has dismissed the tip
}

/**
 * Creates a default weekly tip with required fields populated
 */
export function createDefaultWeeklyTip(): WeeklyTip {
  const now = new Date();
  
  return {
    title: '',
    content: '',
    shortDescription: '',
    category: WeeklyTipCategory.CONVERSATION_STARTERS,
    status: WeeklyTipStatus.PENDING,
    createdAt: now,
    updatedAt: now,
    aiGenerated: false,
    quickTips: [],
    viewCount: 0,
    uniqueViewCount: 0
  };
}

/**
 * Creates a new weekly tip with the provided values
 */
export function createWeeklyTip(data: Partial<WeeklyTip>): WeeklyTip {
  const now = new Date();
  
  return {
    ...createDefaultWeeklyTip(),
    ...data,
    createdAt: data.createdAt || now,
    updatedAt: now
  };
}

/**
 * Determines if a tip is eligible to be shown to users
 */
export function isTipEligibleToShow(tip: WeeklyTip): boolean {
  const now = Date.now();
  
  // Check if tip is approved or active
  if (tip.status !== WeeklyTipStatus.APPROVED && tip.status !== WeeklyTipStatus.ACTIVE) {
    return false;
  }
  
  // Check if tip has expired
  if (tip.expiresAt) {
    try {
      // Convert to timestamp for comparison if needed
      const expiresAt = tip.expiresAt as any; // Use any to handle different timestamp formats
      let expiryTime: number;
      
      if (typeof expiresAt === 'object' && expiresAt !== null) {
        if (expiresAt.toDate && typeof expiresAt.toDate === 'function') {
          // Firestore Timestamp object
          expiryTime = expiresAt.toDate().getTime();
        } else if (expiresAt.seconds && typeof expiresAt.seconds === 'number') {
          // Timestamp-like object with seconds
          expiryTime = expiresAt.seconds * 1000;
        } else {
          // Try to use it as a date directly
          expiryTime = new Date(expiresAt).getTime();
        }
      } else if (typeof expiresAt === 'number') {
        // Numeric timestamp
        expiryTime = expiresAt;
      } else {
        // String date or other format
        expiryTime = new Date(expiresAt).getTime();
      }
      
      // Convert now to timestamp for comparison
      let nowTime: number;
      if (typeof now === 'object' && now !== null) {
        if (now instanceof Date) {
          nowTime = now.getTime();
        } else if ((now as any).toDate && typeof (now as any).toDate === 'function') {
          // Firestore Timestamp
          nowTime = (now as any).toDate().getTime();
        } else if ((now as any).seconds && typeof (now as any).seconds === 'number') {
          // Timestamp-like object
          nowTime = (now as any).seconds * 1000;
        } else {
          // Try to convert to date
          nowTime = new Date(now as any).getTime();
        }
      } else if (typeof now === 'number') {
        nowTime = now;
      } else {
        // Default to current time
        nowTime = new Date().getTime();
      }
      
      if (expiryTime < nowTime) {
        return false;
      }
    } catch (error) {
      console.error('Error comparing dates:', error);
      // If we can't compare dates properly, assume the tip is valid
    }
  }
  
  return true;
}

/**
 * Formats a tip for display in the UI
 */
export function formatTipForDisplay(tip: WeeklyTip): WeeklyTip {
  // Convert timestamps to Date objects if they're numbers
  const formattedTip = { ...tip };
  
  if (typeof formattedTip.createdAt === 'number') {
    formattedTip.createdAt = new Date(formattedTip.createdAt);
  }
  
  if (typeof formattedTip.updatedAt === 'number') {
    formattedTip.updatedAt = new Date(formattedTip.updatedAt);
  }
  
  if (formattedTip.publishedAt && typeof formattedTip.publishedAt === 'number') {
    formattedTip.publishedAt = new Date(formattedTip.publishedAt);
  }
  
  if (formattedTip.expiresAt && typeof formattedTip.expiresAt === 'number') {
    formattedTip.expiresAt = new Date(formattedTip.expiresAt);
  }
  
  return formattedTip;
}

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Default deny all access
    match /{document=**} {
      allow read, write: if false;
    }
    
    // User profiles - users can read/write only their own data
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Notes collection - authenticated users can access notes
    // Since your current implementation doesn't include userId in notes
    match /notes/{noteId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.timestamp is string;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }
    
    // Add rules for any other collections your app uses
    // For example, if you have a matches collection for user matching:
    match /matches/{matchId} {
      allow read: if request.auth != null && 
                  (resource.data.user1Id == request.auth.uid || 
                   resource.data.user2Id == request.auth.uid);
      allow create: if request.auth != null && 
                    (request.resource.data.user1Id == request.auth.uid || 
                     request.resource.data.user2Id == request.auth.uid);
      allow update: if request.auth != null && 
                    (resource.data.user1Id == request.auth.uid || 
                     resource.data.user2Id == request.auth.uid);
      allow delete: if request.auth != null && 
                    (resource.data.user1Id == request.auth.uid || 
                     resource.data.user2Id == request.auth.uid);
    }
  }
}
